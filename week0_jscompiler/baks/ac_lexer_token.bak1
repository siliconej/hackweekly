#include <ctype.h>
#include <string>

enum ACLexerTokenType {
  // Control Token(s).
  TK_EOF           = 0,

  // Literal Tokens.
  TK_BOOLEAN       = 1,
  TK_IDENTIFIER    = 2,
  TK_KEYWORD       = 3,
  TK_NULL          = 4,
  TK_NUMERIC       = 5,
  TK_PUNCTUATOR    = 6,
  TK_STRING        = 7,
  TK_REGEX         = 8,
  TK_TEMPLATE      = 9,

  // Special Tokens. 
  TK_NAN           = 10,
  TK_TRUE          = 11,
  TK_FALSE         = 12,
  TK_UNDEFINED     = 13,
  TK_NULL          = 14,

  // Closure Tokens.
  TK_PAREN_RIGHT          = 20,
  TK_PAREN_LEFT           = 21,
  TK_CURLY_BRACKET_LEFT   = 22,
  TK_CURLY_BRACKET_RIGHT  = 23, 
  TK_SQAURE_BRACKET_LEFT  = 24,
  TK_SQAURE_BRACKET_RIGHT = 25,

  // Operator tokens.
  TK_OP_BOOL_OR      = 100,
  TK_OP_BOOL_AND     = 101,
  TK_OP_BIT_OR       = 102,
  TK_OP_BIT_XOR      = 103,
  TK_OP_BIT_AND      = 104,
  TK_OP_EQUAL_V      = 105,  // equal in value.
  TK_OP_NOT_EQUAL_V  = 106,  // not equal in value.
  TK_OP_EQUAL_VT     = 107,  // equal in value and type.
  TK_OP_NOT_EQUAL_VT = 108,  // not equal in value or type.
  TK_OP_LT           = 109,
  TK_OP_GT           = 110,
  TK_OP_LTE          = 111,
  TK_OP_LGE          = 112,
  TK_OP_INSTANCE_OF  = 113,
  TK_OP_IN           = 114,  // IN operator.
  TK_OP_BIT_SHIFT_L  = 115,  // Shift left.
  TK_OP_BIT_SHIFT_R  = 116,  // Shift right.
  TK_OP_BIT_SHIFT_RZ = 117,  // Shift right with zero fill.
  TK_OP_PLUS         = 118,
  TK_OP_MINUS        = 119,
  TK_OP_MULTIPLY     = 120,
  TK_OP_DIVIDE       = 121,
  TK_OP_MOD          = 122,

  // Assignment tokens.
  TK_ASSIGN              = 130,
  TK_ASSIGN_PLUS         = 131,
  TK_ASSIGN_MINUS        = 132,
  TK_ASSIGN_MULTIPLY     = 133,
  TK_ASSIGN_DIVIDE       = 134,
  TK_ASSIGN_MOD          = 135,
  TK_ASSIGN_LEFT_SHIFT   = 136,
  TK_ASSIGN_RIGHT_SHIFT  = 137,
  TK_ASSIGN_RIGHTZ_SHIFT = 138,
  TK_ASSIGN_BIT_AND      = 139,
  TK_ASSIGN_BIT_OR       = 140,
  TK_ASSIGN_BIT_XOR      = 141,
  TK_ASSIGN_COMMA        = 142,

  // Reserved Keywords.
  TK_RSV_ABSTRACT     = 200,  // not used.
  TK_RSV_BOOLEAN      = 201,  // not used.
  TK_RSV_BREAK        = 202,
  TK_RSV_BYTE         = 203,  // not used.
  TK_RSV_CASE         = 204,
  TK_RSV_CATCH        = 205,
  TK_RSV_CHAR         = 206,  // not used.
  TK_RSV_CLASS        = 207,
  TK_RSV_CONST        = 208,  // not used.
  TK_RSV_CONTINUE     = 209,
  TK_RSV_DEBUGGER     = 210,  // not used.
  TK_RSV_DEFAULT      = 211,  // not used.
  TK_RSV_DELETE       = 212,  // not used.
  TK_RSV_DO           = 213,
  TK_RSV_DOUBLE       = 214,  // not used.
  TK_RSV_ELSE         = 215,
  TK_RSV_ENUM         = 216,  // not supported.
  TK_RSV_EXPORT       = 217,  // not supported.
  TK_RSV_EXTENDS      = 218,
  TK_RSV_FINAL        = 219,  // not used.
  TK_RSV_FINALLY      = 220,
  TK_RSV_FLOAT        = 221,  // not used.
  TK_RSV_FOR          = 222,
  TK_RSV_FUNCTION     = 223,
  TK_RSV_GOTO         = 224,  // not used.
  TK_RSV_IF           = 225,
  TK_RSV_IMPLEMENTS   = 226,  // not used.
  TK_RSV_IMPORT       = 227,  // not supported.
  TK_RSV_IN           = 228,
  TK_RSV_INSTANCEOF   = 229,
  TK_RSV_INT          = 230,  // not used.
  TK_RSV_INTERFACE    = 231,
  TK_RSV_LET          = 232,
  TK_RSV_LONG         = 233,
  TK_RSV_NATIVE       = 234,
  TK_RSV_NEW          = 235,
  TK_RSV_PACKAGE      = 236,
  TK_RSV_PRIVATE      = 237,
  TK_RSV_PROTECTED    = 238,
  TK_RSV_PUBLIC       = 239,
  TK_RSV_RETURN       = 240,
  TK_RSV_SHORT        = 241,
  TK_RSV_STATIC       = 242,
  TK_RSV_SUPER        = 243,  // not supported.
  TK_RSV_SWITCH       = 244,
  TK_RSV_SYNCHRONIZED = 245,
  TK_RSV_THIS         = 246,
  TK_RSV_THROW        = 247,
  TK_RSV_THROWS       = 248,
  TK_RSV_TRANSIENT    = 249,
  TK_RSV_TRY          = 250,
  TK_RSV_TYPEOF       = 251,
  TK_RSV_VAR          = 252,
  TK_RSV_VOID         = 253,
  TK_RSV_VOLATILE     = 254,
  TK_RSV_WHILE        = 255,
  TK_RSV_WITH         = 256,
  TK_RSV_YIELD        = 257   // not supported.
};

const int[23] OPERATOR_PRECEDENCE = {  // Maps to ACTokenType [100, 122].
  /* OP_BOOL_OR */         1,
  /* OP_BOOL_AND */        2,
  /* OP_BIT_OR */          3,
  /* OP_BIT_XOR */         4,
  /* OP_BIT_AND */         5,
  /* OP_EQUAL_V */         6,
  /* OP_NOT_EQUAL_V */     6,
  /* OP_EQUAL_VT */        6,
  /* OP_NOT_EQUAL_VT */    6,
  /* OP_LT */              7,
  /* OP_GT */              7,
  /* OP_LTE */             7,
  /* OP_LGE */             7,
  /* OP_INSTANCE_OF */     7,
  /* TK_OP_IN */           7,
  /* TK_OP_BIT_SHIFT_L */  8,
  /* TK_OP_BIT_SHIFT_R */  8,
  /* TK_OP_BIT_SHIFT_RZ */ 8,
  /* TK_OP_PLUS */         9,
  /* TK_OP_MINUS */        9,
  /* TK_OP_MULTIPLY */    10,
  /* TK_OP_DIVIDE */      10,
  /* TK_OP_MOD */         10
};

const char *OPERATORS[] = {  // Maps to ACTokenType [100, 122].
  "||", "&&", "|", "^", "&", "==", "!=", "===", "!===", "<",
  ">", "<=", ">=", "instanceof", "in", "<<", ">>", ">>>", "+", "-",
  "*", "/", "%" };

const char *ASSIGNS[] = {  // Maps to ACTokenType [130, 142].
  "=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", "&=",
  "|=", "^=", "," };

const char *RESERVED_WORDS[] = {  // Maps to ACTokenType [200, 259].
  "abstract", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue",
  "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "final",
  "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof",
  "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public",
  "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", "transient",
  "try", "typeof", "var", "void", "volatile", "while", "with", "yield" };

#define IS_DECIMAL(x) (x >= '0' && x <= '9')
#define IS_HEX(x) ((x >= '0' && x <= '9") || (x >= 'a' && x <= 'f') || (x >= 'A' && x <= 'F'))

enum UNICODE_LETTER_TYPE {
  UNICODE_WHITESPACE      = 1,
  UNICODE_LINE_BREAK      = 2,
  UNICODE_DIGITS          = 3,
  UNICODE_LETTER_UPPER    = 4,
  UNICODE_LETTER_LOWER    = 5,
  UNICODE_LETTER_TITLE    = 6,
  UNICODE_LETTER_MODIFIER = 7,
  UNICODE_LETTER_OTHER    = 8,
  UNICODE_NUMBER_LETTER   = 9
};

#define IS_WHITESPACE(x) \
  ((UNICODE_TYPE_RANGE_1[x] == UNICODE_WHITESPACE) ||
  x == 0x1680 || x == 0x180e || (x >= 0x2000 && x <= 0x200a) ||
  x == 0x202f || x == 0x205f || x == 0x3000 || x == 0xfeff)

#define IS_LINE_BREAK(x) \
  (UNICODE_TYPE_RANGE_1[x] == UNICODE_LINE_BREAK) || x == 0x2028 || x == 0x2029)

#define IS_OCTAL(x) (x >= '0' && x <= '7')

// Identifier Start Range:
#define IS_LETTER_UPPERCASE(x) \
  ((x >= 'A' && x <= 'Z') || (x >= 0x00c0 && x <= 0x00de) ||
   (x >= 0x0100 && x <= 0x137 && (x & 0x1) == 0) || (x >= 0x139 && x <= 0x149 && (x & 0x1 == 1)) ||
   (x >= 0x014a && x <= 0x178 && (x & 0x1) == 0) || (x >= 0x400 && x <= 0x42f) || (x >= 0x460 && x <= 

#define IS_LETTER_LOWERCASE(x) ()

#define IS_LETTER_TITLECASE(x) ()

#define IS_LETTER_MODIFIER(x) ()

#define IS_LETTER_OTHER(x) ()

#define IS_NUMBER_LETTER(x) ()

#define IS_MARK_SPACE_COMBINING(x) ()

#define IS_MARK_NOSPACING(x) ()

#define IS_NUMBER_DECIMAL_DIGIT(x) ()

#define IS_CONNECTOR_PUNCTUATION(x) ()


// Letter, uppercase.
// Letter, lowercase.
// Letter, titlecase.
// Letter, modifier.
// Letter, other.
// Number, letter.

class ACLexerToken {
  
}
