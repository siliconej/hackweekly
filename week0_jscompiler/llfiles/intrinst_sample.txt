// Alloca a new shared ptr, and make it hold the passed ACJsValue.
Value* LLVMCodegenContext::createJsValueRefAlloca(
    Value* jsvalue, Function* ptrConstructorFunc) {

  IRBuilderBase::InsertPoint saved = builder_->saveIP();
  Value* newNatPtr = createAllocaWithAlignAndInit(
      builder_, init_block_, sharedPtrNatTy_, I32_ALIGNMENT);
  Value* newSharedPtr = createAllocaWithAlignAndInit(
      builder_, init_block_, sharedPtrTy_, OBJ_ALIGNMENT);

  // Create initialization code in init block.
  Value* bitsNatPtr = builder_->CreateBitCast(
      newNatPtr, Type::getInt8Ty(*context_)->getPointerTo());
  Value* bitsPtrPtr = builder_->CreateBitCast(
      newSharedPtr, Type::getInt8Ty(*context_)->getPointerTo());

  Type* intr_args[] = {
    Type::getInt8Ty(*context_)->getPointerTo(),
    Type::getInt64Ty(*context_) };

  Value* nat_intr_args[] = {
    bitsNatPtr, builder_->getInt8(0),
    builder_->getInt64(I32_ALIGNMENT), builder_->getFalse() };
  Value* ptr_intr_args[] = {
    bitsPtrPtr, builder_->getInt8(0),
    builder_->getInt64(sizeof(RJSVALUE)), builder_->getFalse() };

  // bzero on both allocations, notice that intrinsic omits 2 params.
  // first is the value of the data, second is the volatile flag.
  Function* intrFn = Intrinsic::getDeclaration(
      module_, Intrinsic::memset, ArrayRef<Type*>(intr_args, 2));
  CallInst* memset_call =
      builder_->CreateCall(intrFn, ArrayRef<Value*>(nat_intr_args, 4));
  memset_call->addParamAttr(
      0, Attribute::getWithAlignment(*context_, I32_ALIGNMENT));
  memset_call =
      builder_->CreateCall(intrFn, ArrayRef<Value*>(ptr_intr_args, 4));
  memset_call->addParamAttr(
      0, Attribute::getWithAlignment(*context_, I32_ALIGNMENT));

  // Create real assignment code in exec block.
  builder_->restoreIP(saved);
  Value* gep_args[] = { builder_->getInt32(0), builder_->getInt32(0) };
  Value* elementPtr = builder_->CreateInBoundsGEP(
      sharedPtrNatTy_, newNatPtr, ArrayRef<Value*>(gep_args, 2), "nat");
  Value* natValue = builder_->CreateAlignedLoad(elementPtr, I32_ALIGNMENT);
  Value* args[] = { newSharedPtr, jsvalue, natValue };
  builder_->CreateCall(ptrConstructorFunc, ArrayRef<Value*>(args, 3));

  // FIXME(ejiang): use context based allocation list.
  alloca_list_.push_back(newSharedPtr);
  return newSharedPtr;
}
