##### Parse Result #####
((*)) AST(function,function) {function((*)) AST(variant,reference var) {{[97]}}(((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[98]}}}} <,> ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[99]}}}})((*)) AST(block) {>>>>>> 0 >>>>>> (#16)((@)) AST(statement,var decl list) {*VAR**((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[100]}}}} *=* ((*)) AST(variant,numeric var) {{(I)0}}}*} (#16) <<<<<<<<<<< >>>>>> 1 >>>>>> (#16)((@)) AST(statement,do-while stmt) {*DO*((*)) AST(block) {>>>>>> 0 >>>>>> (#64)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,assignment expr) {[] ((*)) AST(variant,reference var) {{[100]}}{ASSIGN_PLUS(+=)} {((*)) AST(variant,reference var) {{[98]}}}}} (#64) <<<<<<<<<<< >>>>>> 1 >>>>>> (#64)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,assignment expr) {[] ((*)) AST(variant,reference var) {{[100]}}{ASSIGN_DIVIDE(/=)} {((*)) AST(variant,reference var) {{[99]}}}}}(#64) <<<<<<<<<<< }*WHILE* (((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[100]}} {LT(<)} ((*)) AST(variant,numeric var) {{(I)100}}})}(#16) <<<<<<<<<<< }}
########################
##### Parse Result #####
((*)) AST(function,function) {function((*)) AST(variant,reference var) {{[97]}}(((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[98]}}}} <,> ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[99]}}}})((*)) AST(block) {>>>>>> 0 >>>>>> (#16)((@)) AST(statement,var decl list) {*VAR**((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[100]}}}} *=* ((*)) AST(variant,numeric var) {{(I)0}}}*} (#16) <<<<<<<<<<< >>>>>> 1 >>>>>> (#16)((@)) AST(statement,do-while stmt) {*DO*((*)) AST(block) {>>>>>> 0 >>>>>> (#94)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,assignment expr) {[] ((*)) AST(variant,reference var) {{[100]}}{ASSIGN_PLUS(+=)} {((*)) AST(variant,reference var) {{[98]}}}}} (#94) <<<<<<<<<<< >>>>>> 1 >>>>>> (#94)((@)) AST(statement,do-while stmt) {*DO*((*)) AST(block) {>>>>>> 0 >>>>>> (#75)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,assignment expr) {[] ((*)) AST(variant,reference var) {{[100]}}{ASSIGN_DIVIDE(/=)} {((*)) AST(variant,reference var) {{[99]}}}}} (#75) <<<<<<<<<<< }*WHILE* (((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[100]}} {GT(>)} ((*)) AST(variant,numeric var) {{(I)1}}})}(#94) <<<<<<<<<<< }*WHILE* (((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[100]}} {LT(<)} ((*)) AST(variant,numeric var) {{(I)100}}})}(#16) <<<<<<<<<<< >>>>>> 2 >>>>>> (#16)((@)) AST(statement,if-else stmt) {*IF*[] ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[100]}} {LT(<)} ((*)) AST(variant,numeric var) {{(I)100}}}*TRUE_BLOCK*((*)) AST(block) {>>>>>> 0 >>>>>> (#151)((@)) AST(statement,return stmt) {*RETURN*[] ((*)) AST(variant,string var) {{[103][114][101][97][116]}}} (#151) <<<<<<<<<<< }*FALSE_BLOCK*((*)) AST(block) {>>>>>> 0 >>>>>> (#179)((@)) AST(statement,return stmt) {*RETURN*[] ((*)) AST(variant,string var) {{[98][97][100]}}} (#179) <<<<<<<<<<< }}(#16) <<<<<<<<<<< }}
########################
##### Parse Result #####
((@)) AST(statement,var decl list) {*VAR**((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[105]}}}} *=* ((*)) AST(variant,numeric var) {{(I)0}}}*}((@)) AST(statement,while stmt) {*WHILE* (((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(expression,postfix expr) {[] ((*)) AST(variant,reference var) {{[105]}}{SELF_PLUS(++)}} {LT(<)} ((*)) AST(variant,numeric var) {{(I)100}}})((*)) AST(block) {>>>>>> 0 >>>>>> (#94)((@)) AST(statement,if-else stmt) {*IF*[] ((*)) AST(expression,binary expr) {[] (null)(PREC=6) ((*)) AST(expression,binary expr) {[] (null)(PREC=10) ((*)) AST(variant,reference var) {{[105]}} {MOD(%)} ((*)) AST(variant,numeric var) {{(I)2}}} {EQUAL_V(==)} ((*)) AST(variant,numeric var) {{(I)0}}}*TRUE_BLOCK*((*)) AST(block) {>>>>>> 0 >>>>>> (#82)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,call expr) {[] ((*)) AST(variant,reference var) {{[112][114][105][110][116]}}(((*)) AST(variant,string var) {{[104][101][108][108][111][44][32][119][111][114][108][100][33]}})}} (#82) <<<<<<<<<<< }*FALSE_BLOCK*(null)} (#94) <<<<<<<<<<< }}
########################
##### Parse Result #####
((@)) AST(statement,while stmt) {*WHILE* (((*)) AST(variant,bool var) {{true}})((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,call expr) {[] ((*)) AST(variant,reference var) {{[100][111][105][110][103][95][110][111][116][104][105][110][103]}}()}}}
########################
