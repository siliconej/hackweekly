##### Parse Result #####
((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[97]}} {IN} ((*)) AST(variant,reference var) {{[98]}}}}
########################
##### Parse Result #####
((@)) AST(statement,var decl list) {*VAR**((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[99][111][108]}}}} *=* ((*)) AST(collection) {[]}}*}((@)) AST(statement,if-else stmt) {*IF*[] ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(expression,binary expr) {[] (null)(PREC=9) ((*)) AST(variant,numeric var) {{(I)1}} {PLUS(+)} ((*)) AST(variant,numeric var) {{(I)2}}} {IN} ((*)) AST(variant,reference var) {{[99][111][108]}}}*TRUE_BLOCK*((*)) AST(block) {>>>>>> 0 >>>>>> (#66)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,call expr) {[] ((*)) AST(member ref,static member) {[] ((*)) AST(variant,reference var) {{[99][111][110][115][111][108][101]}} <.> ((*)) AST(variant,reference var) {{[108][111][103]}}}(((*)) AST(variant,string var) {{[103][114][101][97][116][33]}})}} (#66) <<<<<<<<<<< }*FALSE_BLOCK*(null)}
########################
##### Parse Result #####
((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,binary expr) {[] (null)(PREC=1) ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[101]}} {IN} ((*)) AST(variant,reference var) {{[99]}}} {BOOL_OR(||)} ((*)) AST(expression,assignment expr) {[] ((*)) AST(member ref,runtime member) {[] ((*)) AST(variant,reference var) {{[99]}}[((*)) AST(variant,reference var) {{[101]}}]}{ASSIGN_EQUAL(=)} {((*)) AST(object,general object) {{}}}}}}
########################
##### Parse Result #####
((@)) AST(statement,for stmt) {*FOR* (((*)) AST(expression,sequence expr) {[] (null)((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[100]}}}} *=* ((*)) AST(variant,numeric var) {{(I)0}}}} *;* ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[100]}} {LT(<)} ((*)) AST(expression,binary expr) {[] (null)(PREC=9) ((*)) AST(member ref,static member) {[] ((*)) AST(variant,reference var) {{[97]}} <.> ((*)) AST(variant,reference var) {{[108][101][110][103][116][104]}}} {MINUS(-)} ((*)) AST(variant,numeric var) {{(I)1}}}} *;* ((*)) AST(expression,postfix expr) {[] ((*)) AST(variant,reference var) {{[100]}}{SELF_PLUS(++)}} )((*)) AST(block) {>>>>>> 0 >>>>>> (#77)((@)) AST(statement,var decl list) {*VAR**((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[101]}}}} *=* ((*)) AST(member ref,runtime member) {[] ((*)) AST(variant,reference var) {{[97]}}[((*)) AST(variant,reference var) {{[100]}}]}}*} (#77) <<<<<<<<<<< >>>>>> 1 >>>>>> (#77)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,binary expr) {[] (null)(PREC=1) ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[101]}} {IN} ((*)) AST(variant,reference var) {{[99]}}} {BOOL_OR(||)} ((*)) AST(expression,assignment expr) {[] ((*)) AST(member ref,runtime member) {[] ((*)) AST(variant,reference var) {{[99]}}[((*)) AST(variant,reference var) {{[101]}}]}{ASSIGN_EQUAL(=)} {((*)) AST(object,general object) {{}}}}}}(#77) <<<<<<<<<<< >>>>>> 2 >>>>>> (#77)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,assignment expr) {[] ((*)) AST(variant,reference var) {{[99]}}{ASSIGN_EQUAL(=)} {((*)) AST(member ref,runtime member) {[] ((*)) AST(variant,reference var) {{[99]}}[((*)) AST(variant,reference var) {{[101]}}]}}}}(#77) <<<<<<<<<<< }}
########################
