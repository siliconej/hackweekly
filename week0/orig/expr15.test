##### Parse Result #####
((*)) AST(function,function) {function((*)) AST(variant,reference var) {{[97]}}(((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[98]}}}} <,> ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[99]}}}})((*)) AST(block) {>>>>>> 0 >>>>>> (#16)((@)) AST(statement,for stmt) {*FOR* (((*)) AST(expression,sequence expr) {[] (null)((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[120]}}}} *=* ((*)) AST(variant,reference var) {{[98]}}}} *;* ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[120]}} {LT(<)} ((*)) AST(variant,reference var) {{[99]}}} *;* ((*)) AST(expression,postfix expr) {[] ((*)) AST(variant,reference var) {{[120]}}{SELF_PLUS(++)}} )((*)) AST(block) {>>>>>> 0 >>>>>> (#77)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,call expr) {[] ((*)) AST(member ref,static member) {[] ((*)) AST(variant,reference var) {{[99][111][110][115][111][108][101]}} <.> ((*)) AST(variant,reference var) {{[108][111][103]}}}(((*)) AST(expression,binary expr) {[] (null)(PREC=9) ((*)) AST(variant,reference var) {{[120]}} {PLUS(+)} ((*)) AST(variant,string var) {{[10]}}})}} (#77) <<<<<<<<<<< }} (#16) <<<<<<<<<<< }}
########################
##### Parse Result #####
((*)) AST(function,function) {function((*)) AST(variant,reference var) {{[98][117][98][98][108][101][95][115][111][114][116]}}(((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[99]}}}})((*)) AST(block) {>>>>>> 0 >>>>>> (#24)((@)) AST(statement,for stmt) {*FOR* (((*)) AST(expression,sequence expr) {[] (null)((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[120]}}}} *=* ((*)) AST(variant,numeric var) {{(I)0}}}} *;* ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[120]}} {LT(<)} ((*)) AST(expression,binary expr) {[] (null)(PREC=9) ((*)) AST(expression,call expr) {[] ((*)) AST(member ref,static member) {[] ((*)) AST(variant,reference var) {{[99]}} <.> ((*)) AST(variant,reference var) {{[108][101][110][103][116][104]}}}()} {MINUS(-)} ((*)) AST(variant,numeric var) {{(I)1}}}} *;* ((*)) AST(expression,postfix expr) {[] ((*)) AST(variant,reference var) {{[120]}}{SELF_PLUS(++)}} )((*)) AST(block) {>>>>>> 0 >>>>>> (#222)((@)) AST(statement,for stmt) {*FOR* (((*)) AST(expression,sequence expr) {[] (null)((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[121]}}}} *=* ((*)) AST(expression,binary expr) {[] (null)(PREC=9) ((*)) AST(variant,reference var) {{[120]}} {PLUS(+)} ((*)) AST(variant,numeric var) {{(I)1}}}}} *;* ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[121]}} {LT(<)} ((*)) AST(expression,call expr) {[] ((*)) AST(member ref,static member) {[] ((*)) AST(variant,reference var) {{[99]}} <.> ((*)) AST(variant,reference var) {{[108][101][110][103][116][104]}}}()}} *;* ((*)) AST(expression,postfix expr) {[] ((*)) AST(variant,reference var) {{[121]}}{SELF_PLUS(++)}} )((*)) AST(block) {>>>>>> 0 >>>>>> (#220)((@)) AST(statement,if-else stmt) {*IF*[] ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(member ref,runtime member) {[] ((*)) AST(variant,reference var) {{[99]}}[((*)) AST(variant,reference var) {{[120]}}]} {GT(>)} ((*)) AST(member ref,runtime member) {[] ((*)) AST(variant,reference var) {{[99]}}[((*)) AST(variant,reference var) {{[121]}}]}}*TRUE_BLOCK*((*)) AST(block) {>>>>>> 0 >>>>>> (#216)((@)) AST(statement,var decl list) {*VAR**((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[116][101][109][112]}}}} *=* ((*)) AST(member ref,runtime member) {[] ((*)) AST(variant,reference var) {{[99]}}[((*)) AST(variant,reference var) {{[121]}}]}}*} (#216) <<<<<<<<<<< >>>>>> 1 >>>>>> (#216)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,assignment expr) {[] ((*)) AST(member ref,runtime member) {[] ((*)) AST(variant,reference var) {{[99]}}[((*)) AST(variant,reference var) {{[121]}}]}{ASSIGN_EQUAL(=)} {((*)) AST(member ref,runtime member) {[] ((*)) AST(variant,reference var) {{[99]}}[((*)) AST(variant,reference var) {{[120]}}]}}}}(#216) <<<<<<<<<<< >>>>>> 2 >>>>>> (#216)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,assignment expr) {[] ((*)) AST(member ref,runtime member) {[] ((*)) AST(variant,reference var) {{[99]}}[((*)) AST(variant,reference var) {{[120]}}]}{ASSIGN_EQUAL(=)} {((*)) AST(variant,reference var) {{[116][101][109][112]}}}}}(#216) <<<<<<<<<<< }*FALSE_BLOCK*(null)} (#220) <<<<<<<<<<< }} (#222) <<<<<<<<<<< }} (#24) <<<<<<<<<<< }}
########################
##### Parse Result #####
((*)) AST(function,function) {function((*)) AST(variant,reference var) {{[97]}}(((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[98]}}}} <,> ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[99]}}}})((*)) AST(block) {>>>>>> 0 >>>>>> (#16)((@)) AST(statement,for stmt) {*FOR* (((*)) AST(expression,sequence expr) {[] (null)((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[120]}}}} *=* ((*)) AST(variant,reference var) {{[98]}}}} *;* ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[120]}} {LT(<)} ((*)) AST(variant,reference var) {{[99]}}} *;* ((*)) AST(expression,postfix expr) {[] ((*)) AST(variant,reference var) {{[120]}}{SELF_PLUS(++)}} )((*)) AST(block) {>>>>>> 0 >>>>>> (#121)((@)) AST(statement,if-else stmt) {*IF*[] ((*)) AST(expression,binary expr) {[] (null)(PREC=6) ((*)) AST(expression,binary expr) {[] (null)(PREC=10) ((*)) AST(variant,reference var) {{[120]}} {MOD(%)} ((*)) AST(variant,numeric var) {{(I)2}}} {EQUAL_V(==)} ((*)) AST(variant,numeric var) {{(I)0}}}*TRUE_BLOCK*((*)) AST(block) {>>>>>> 0 >>>>>> (#94)((@)) AST(statement,continue stmt) {[] (null)} (#94) <<<<<<<<<<< }*FALSE_BLOCK*(null)} (#121) <<<<<<<<<<< >>>>>> 1 >>>>>> (#121)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,call expr) {[] ((*)) AST(member ref,static member) {[] ((*)) AST(variant,reference var) {{[99][111][110][115][111][108][101]}} <.> ((*)) AST(variant,reference var) {{[108][111][103]}}}(((*)) AST(expression,binary expr) {[] (null)(PREC=9) ((*)) AST(variant,reference var) {{[120]}} {PLUS(+)} ((*)) AST(variant,string var) {{[10]}}})}}(#121) <<<<<<<<<<< }} (#16) <<<<<<<<<<< }}
########################
##### Parse Result #####
((*)) AST(function,function) {function((*)) AST(variant,reference var) {{[97]}}(((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[98]}}}} <,> ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[99]}}}})((*)) AST(block) {>>>>>> 0 >>>>>> (#16)((@)) AST(statement,var decl list) {*VAR**((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[120]}}}} *=* ((*)) AST(variant,numeric var) {{(I)0}}}*} (#16) <<<<<<<<<<< >>>>>> 1 >>>>>> (#16)((@)) AST(statement,for stmt) {*FOR* (((*)) AST(expression,sequence expr) {[] (null)} *;* ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[120]}} {LT(<)} ((*)) AST(variant,reference var) {{[99]}}} *;* ((*)) AST(expression,postfix expr) {[] ((*)) AST(variant,reference var) {{[120]}}{SELF_PLUS(++)}} )((*)) AST(block) {>>>>>> 0 >>>>>> (#127)((@)) AST(statement,if-else stmt) {*IF*[] ((*)) AST(expression,binary expr) {[] (null)(PREC=6) ((*)) AST(expression,binary expr) {[] (null)(PREC=10) ((*)) AST(variant,reference var) {{[120]}} {MOD(%)} ((*)) AST(variant,numeric var) {{(I)2}}} {EQUAL_V(==)} ((*)) AST(variant,numeric var) {{(I)0}}}*TRUE_BLOCK*((*)) AST(block) {>>>>>> 0 >>>>>> (#100)((@)) AST(statement,continue stmt) {[] (null)} (#100) <<<<<<<<<<< }*FALSE_BLOCK*(null)} (#127) <<<<<<<<<<< >>>>>> 1 >>>>>> (#127)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,call expr) {[] ((*)) AST(member ref,static member) {[] ((*)) AST(variant,reference var) {{[99][111][110][115][111][108][101]}} <.> ((*)) AST(variant,reference var) {{[108][111][103]}}}(((*)) AST(expression,binary expr) {[] (null)(PREC=9) ((*)) AST(variant,reference var) {{[120]}} {PLUS(+)} ((*)) AST(variant,string var) {{[10]}}})}}(#127) <<<<<<<<<<< }}(#16) <<<<<<<<<<< }}
########################
##### Parse Result #####
((*)) AST(function,function) {function((*)) AST(variant,reference var) {{[97]}}(((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[98]}}}} <,> ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[99]}}}})((*)) AST(block) {>>>>>> 0 >>>>>> (#16)((@)) AST(statement,var decl list) {*VAR**((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[120]}}}} *=* ((*)) AST(variant,numeric var) {{(I)0}}}*} (#16) <<<<<<<<<<< >>>>>> 1 >>>>>> (#16)((@)) AST(statement,for stmt) {*FOR* (((*)) AST(expression,sequence expr) {[] (null)} *;* ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[120]}} {LT(<)} ((*)) AST(variant,reference var) {{[99]}}} *;* (null) )((*)) AST(block) {>>>>>> 0 >>>>>> (#138)((@)) AST(statement,if-else stmt) {*IF*[] ((*)) AST(expression,binary expr) {[] (null)(PREC=6) ((*)) AST(expression,binary expr) {[] (null)(PREC=10) ((*)) AST(variant,reference var) {{[120]}} {MOD(%)} ((*)) AST(variant,numeric var) {{(I)2}}} {EQUAL_V(==)} ((*)) AST(variant,numeric var) {{(I)0}}}*TRUE_BLOCK*((*)) AST(block) {>>>>>> 0 >>>>>> (#97)((@)) AST(statement,continue stmt) {[] (null)} (#97) <<<<<<<<<<< }*FALSE_BLOCK*(null)} (#138) <<<<<<<<<<< >>>>>> 1 >>>>>> (#138)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,call expr) {[] ((*)) AST(member ref,static member) {[] ((*)) AST(variant,reference var) {{[99][111][110][115][111][108][101]}} <.> ((*)) AST(variant,reference var) {{[108][111][103]}}}(((*)) AST(expression,binary expr) {[] (null)(PREC=9) ((*)) AST(variant,reference var) {{[120]}} {PLUS(+)} ((*)) AST(variant,string var) {{[10]}}})}}(#138) <<<<<<<<<<< >>>>>> 2 >>>>>> (#138)((@)) AST(statement,expr stmt) {[] ((*)) AST(expression,assignment expr) {[] ((*)) AST(variant,reference var) {{[120]}}{ASSIGN_PLUS(+=)} {((*)) AST(variant,numeric var) {{(R)0.05}}}}}(#138) <<<<<<<<<<< }}(#16) <<<<<<<<<<< }}
########################
##### Parse Result #####
((*)) AST(function,function) {function((*)) AST(variant,reference var) {{[97]}}(((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[98]}}}} <,> ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[99]}}}})((*)) AST(block) {>>>>>> 0 >>>>>> (#16)((@)) AST(statement,var decl list) {*VAR**((*)) AST(expression,var decl) {[] ((*)) AST(function,id param) {{((*)) AST(variant,reference var) {{[120]}}}} *=* ((*)) AST(variant,numeric var) {{(I)0}}}*} (#16) <<<<<<<<<<< >>>>>> 1 >>>>>> (#16)((@)) AST(statement,for stmt) {*FOR* (((*)) AST(expression,sequence expr) {[] (null)} *;* ((*)) AST(expression,binary expr) {[] (null)(PREC=7) ((*)) AST(variant,reference var) {{[120]}} {LT(<)} ((*)) AST(variant,reference var) {{[99]}}} *;* ((*)) AST(expression,assignment expr) {[] ((*)) AST(variant,reference var) {{[120]}}{ASSIGN_PLUS(+=)} {((*)) AST(variant,numeric var) {{(I)5}}}} )((@)) AST(statement,empty stmt) {*;*}}(#16) <<<<<<<<<<< }}
########################
